{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","number","setNumber","name","setName","expiry","setExpiry","cvc","setCvc","focus","setFocus","className","class","data-tilt","focused","type","placeholder","value","onChange","e","target","onFocus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NA8FeA,MAxFf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEWF,mBAAS,IAFpB,mBAENG,EAFM,KAEAC,EAFA,OAGeJ,mBAAS,IAHxB,mBAGNK,EAHM,KAGEC,EAHF,OAIUN,mBAAS,IAJnB,mBAILO,EAJK,KAIAC,EAJA,OAKaR,mBAAS,IALtB,mBAKNS,EALM,KAKCC,EALD,KAMb,OACE,yBAAKC,UAAU,OACb,yBAAKC,MAAM,WACf,yBAAKA,MAAM,sBAEV,yBAAKA,MAAM,iBAEV,yBAAKA,MAAM,gBAAgBC,aAAA,GACxB,kBAAC,IAAD,CACMZ,OAAQA,EACRE,KAAMA,EACNE,OAAQA,EACRE,IAAKA,EACLO,QAASL,KAIlB,0BAAMG,MAAM,+BACX,0BAAMA,MAAM,uBAAZ,0BAIA,yBAAKA,MAAM,gCACV,2BAAOA,MAAM,WACPG,KAAK,MAAMZ,KAAK,SAChBa,YAAY,cACZC,MAAOhB,EACPiB,SAAY,SAAAC,GAAC,OAAIjB,EAAUiB,EAAEC,OAAOH,QACpCI,QAAW,SAAAF,GAAC,OAAIT,EAASS,EAAEC,OAAOjB,SAElC,0BAAMS,MAAM,oBAKnB,yBAAKA,MAAM,gCACN,2BAAOA,MAAM,WACXG,KAAK,OAAOZ,KAAK,OACjBa,YAAY,OACZC,MAAOd,EACPe,SAAY,SAAAC,GAAC,OAAIf,EAAQe,EAAEC,OAAOH,QAClCI,QAAW,SAAAF,GAAC,OAAIT,EAASS,EAAEC,OAAOjB,SAExC,0BAAMS,MAAM,oBAGb,yBAAKA,MAAM,gCACN,2BAAOA,MAAM,WACXG,KAAK,OAAOZ,KAAK,SACjBa,YAAY,eACZC,MAAOZ,EACPa,SAAY,SAAAC,GAAC,OAAIb,EAAUa,EAAEC,OAAOH,QACpCI,QAAW,SAAAF,GAAC,OAAIT,EAASS,EAAEC,OAAOjB,SAExC,0BAAMS,MAAM,oBAGb,yBAAKA,MAAM,gCACN,2BAAOA,MAAM,WACXG,KAAK,MAAMZ,KAAK,MAChBa,YAAY,MACZC,MAAOV,EACPW,SAAY,SAAAC,GAAC,OAAIX,EAAOW,EAAEC,OAAOH,QACjCI,QAAW,SAAAF,GAAC,OAAIT,EAASS,EAAEC,OAAOjB,SAExC,0BAAMS,MAAM,0BCjEEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.29603fb4.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport Cards from 'react-credit-cards';\nimport 'react-credit-cards/es/styles-compiled.css';\n\nimport './App.css';\n\nfunction App() {\n  const [number, setNumber] = useState('')\n  const [name, setName] = useState('')\n  const [expiry, setExpiry] = useState('')\n  const  [cvc, setCvc] = useState('')\n  const [focus, setFocus] = useState('')\n  return (\n    <div className=\"App\">\n      <div class=\"limiter\">\n\t\t<div class=\"container-login100\">\n   \n\t\t\t<div class=\"wrap-login100\">\n      \n\t\t\t\t<div class=\"login100-pic \" data-tilt>\n\t\t\t\t   <Cards\n             number={number}\n             name={name}\n             expiry={expiry}\n             cvc={cvc}\n             focused={focus}\n           />\n\t\t\t\t</div>\n\n\t\t\t\t<form class=\"login100-form validate-form\">\n\t\t\t\t\t<span class=\"login100-form-title\">\n\t\t\t\t\tCard Payment Component\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<div class=\"wrap-input100 validate-input\" >\n\t\t\t\t\t <input class=\"input100\" \n            type=\"tel\" name=\"number\" \n            placeholder=\"Card Number\" \n            value={number} \n            onChange = {e => setNumber(e.target.value)}\n            onFocus = {e => setFocus(e.target.name)}\n            />\n            <span class=\"focus-input100\"></span>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"wrap-input100 validate-input\" >\n          <input class=\"input100\" \n            type=\"text\" name=\"name\" \n            placeholder=\"Name\" \n            value={name} \n            onChange = {e => setName(e.target.value)}\n            onFocus = {e => setFocus(e.target.name)}\n            />\n\t\t\t\t\t\t<span class=\"focus-input100\"></span>\n\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"wrap-input100 validate-input\" >\n          <input class=\"input100\" \n            type=\"text\" name=\"expiry\" \n            placeholder=\"MM/YY Expiry\" \n            value={expiry} \n            onChange = {e => setExpiry(e.target.value)}\n            onFocus = {e => setFocus(e.target.name)}\n            />\n\t\t\t\t\t\t<span class=\"focus-input100\"></span>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"wrap-input100 validate-input\" >\n          <input class=\"input100\" \n            type=\"tel\" name=\"cvc\" \n            placeholder=\"CVC\" \n            value={cvc} \n            onChange = {e => setCvc(e.target.value)}\n            onFocus = {e => setFocus(e.target.name)}\n            />\n\t\t\t\t\t\t<span class=\"focus-input100\"></span>\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t\t\n\n\t\t\t\t\t\n\n\t\t\t\t\t\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}